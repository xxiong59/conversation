{"ast":null,"code":"import { behaviors } from \"./behaviorDefinition.js\";\nlet currentVolume = 10;\nlet videoSocket = null;\nlet isVideoStreaming = false;\nconst emotionToBehavior = {\n  annoyed: 'annoyance',\n  anticipation: 'anticipation',\n  apprehension: 'apprehension',\n  bored: 'boredom',\n  dancing: 'dancing',\n  disgust: 'disgust',\n  distracted: 'distraction',\n  ecstatic: 'ecstasy',\n  elicit: 'elicit',\n  fear: 'fear',\n  grief: 'grief',\n  interest: 'interest',\n  joy: 'joy',\n  loathing: 'loathing',\n  pensive: 'pensiveness',\n  rage: 'rage',\n  sad: 'sadness',\n  serene: 'serenity',\n  sleepy: 'sleepy',\n  spooked: 'spooked',\n  surprised: 'surprise',\n  terror: 'terror',\n  trust: 'trust',\n  vigilant: 'vigilance',\n  default: 'default'\n};\nexport class MistyApi {\n  constructor(ip) {\n    this.socket = null;\n    this.ipAddress = ip;\n    this.audioCallbacks = [];\n\n    // 将方法绑定到实例\n    this.connect2Misty = this.connect2Misty.bind(this);\n    this.registerForAudioPlayComplete = this.registerForAudioPlayComplete.bind(this);\n    this.registerForBumpSensor = this.registerForBumpSensor.bind(this);\n    this.registerAudioCallback = this.registerAudioCallback.bind(this);\n    this.handleMessage = this.handleMessage.bind(this);\n    this.uploadAudio = this.uploadAudio.bind(this);\n    this.playAudio = this.playAudio.bind(this);\n    this.deleteAudio = this.deleteAudio.bind(this);\n    this.startVedioStreaming = this.startVedioStreaming.bind(this);\n    this.stopVideoStreaming = this.stopVideoStreaming.bind(this);\n    this.getVideoRecordingsList = this.getVideoRecordingsList.bind(this);\n    this.handleBumpSensorEvent = this.handleBumpSensorEvent.bind(this);\n\n    // this.connect2Misty(ip);\n  }\n  connect2Misty() {\n    const ip = this.ipAddress;\n    this.socket = new WebSocket(`ws://${ip}/pubsub`);\n    this.socket.onopen = () => {\n      console.log('WebSocket connected');\n      // You can send an initial command or subscribe to events here\n      setTimeout(() => {\n        // Now it's safe to register for events\n        this.registerForAudioPlayComplete();\n        this.registerForBumpSensor();\n        this.playAudio(\"mario_bros_coin.mp3\");\n        this.getVideoRecordingsList();\n      }, 500);\n    };\n    this.socket.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    this.socket.onclose = () => {\n      console.log('WebSocket closed');\n    };\n    this.socket.onmessage = event => {\n      console.log('Message from server:', event.data);\n      // Handle incoming messages from the robot\n      this.handleMessage(event.data);\n    };\n  }\n  registerForAudioPlayComplete() {\n    const subscribeMsg = {\n      Operation: 'subscribe',\n      Type: 'AudioPlayComplete',\n      DebounceMs: 0,\n      EventName: 'AudioPlayComplete',\n      ReturnProperty: null,\n      EventConditions: []\n    };\n    this.audioCallbacks.forEach(callback => callback());\n    this.socket.send(JSON.stringify(subscribeMsg));\n  }\n  registerForBumpSensor() {\n    const subscribeMsg = {\n      Operation: 'subscribe',\n      Type: 'BumpSensor',\n      DebounceMs: 0,\n      EventName: 'BumpSensor',\n      ReturnProperty: null,\n      EventConditions: []\n    };\n    this.socket.send(JSON.stringify(subscribeMsg));\n  }\n  registerAudioCallback(callback) {\n    this.audioCallbacks.push(callback);\n  }\n  handleMessage(data) {\n    const message = JSON.parse(data);\n    switch (message.eventName) {\n      case 'AudioPlayComplete':\n        if (message.message && message.message.metaData) {\n          console.log('Audio playback completed');\n          if (message.message.metaData.name !== \"mario_bros_coin.mp3\") {\n            this.deleteAudio(message.message.metaData.name);\n          }\n        } else {\n          console.log('AudioPlayComplete registration status received');\n        }\n        break;\n      case 'BumpSensor':\n        this.handleBumpSensorEvent(message);\n        break;\n      case '':\n        break;\n      default:\n        console.log('Misty message ${message} ');\n        break;\n    }\n  }\n  async uploadAudio(base64AudioData, filename) {\n    const uploadResponse = await fetch(`http://${this.ipAddress}/api/audio`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        FileName: filename,\n        Data: base64AudioData,\n        OverwriteExisting: true\n      })\n    });\n    console.log(\"Upload Response from teh Upload audio function : \", uploadResponse);\n    if (!uploadResponse.ok) {\n      throw new Error(`Failed to upload audio: ${uploadResponse.statusText}`);\n    }\n  }\n  async playAudio(filename) {\n    const playResponse = await fetch(`http://${this.ipAddress}/api/audio/play`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        AssetId: filename,\n        volume: currentVolume\n      })\n    });\n    if (!playResponse.ok) {\n      throw new Error(`Failed to play audio: ${playResponse.statusText}`);\n    }\n  }\n  async deleteAudio(filename) {\n    try {\n      const response = await fetch(`http://${this.ipAddress}/api/audio`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          FileName: filename\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to delete audio: ${response.statusText}`);\n      }\n      const result = await response.json();\n      console.log(\"Successfully deleted file:\", result, filename);\n      return result.result;\n    } catch (error) {\n      console.error('Error deleting audio:', error);\n      throw error;\n    }\n  }\n  async startRecordAudio(filename) {\n    try {\n      const response = await fetch(`http://${this.ipAddress}/api/audio/record/start`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          FileName: filename\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to delete audio: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error deleting audio:', error);\n      throw error;\n    }\n  }\n  async stopRecordAudio() {\n    try {\n      const response = await fetch(`http://${this.ipAddress}/api/audio/record/stop`, {\n        method: 'POST'\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to delete audio: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error deleting audio:', error);\n      throw error;\n    }\n  }\n  async getRecordAudio(filename) {\n    try {\n      const base64Param = \"&Base64=true\";\n      const url = `http://${this.ipAddress}/api/audio?FileName=${filename}${base64Param}`;\n\n      // Make the API request\n      const response = await fetch(url, {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to get audio: ${response.status} ${response.statusText}`);\n      }\n      const responseData = await response.json();\n      console.log(\"Parsed response data:\", responseData);\n      return responseData.result.base64;\n    } catch (error) {\n      console.error(\"Error retrieving audio:\", error);\n      throw error;\n    }\n  }\n  async startRecordVedio(filename, mute, duration, width, height) {\n    try {\n      const response = await fetch(`http://${this.ipAddress}/api/videos/recordings/start`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"FileName\": filename,\n          \"Mute\": mute,\n          \"Duration\": duration,\n          \"Width\": 1920,\n          \"Height\": 1080\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to delete audio: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error deleting audio:', error);\n      throw error;\n    }\n  }\n  async stopRecordVedio() {}\n  async getRecordVedio() {}\n  async startVedioStreaming(processFrameCallback) {\n    try {\n      const response = await fetch(`http://${this.ipAddress}/api/videostreaming/start`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"Port\": 6789,\n          \"Rotation\": 0,\n          \"Width\": 640,\n          // 可调整为你需要的分辨率\n          \"Height\": 480,\n          // 可调整为你需要的分辨率\n          \"Quality\": 75,\n          // 画质与性能的平衡\n          \"Overlay\": false\n        })\n      });\n      const data = await response.json();\n      if (data.result) {\n        videoSocket = new WebSocket(`ws://${this.ipAddress}:6789`);\n        console.log(data);\n        videoSocket.onopen = () => {\n          console.log('Connected to video stream');\n          isVideoStreaming = true;\n        };\n        videoSocket.onmessage = event => {\n          if (typeof processFrameCallback === 'function') {\n            processFrameCallback(event.data);\n          }\n        };\n        videoSocket.onerror = error => {\n          console.error('Video WebSocket error:', error);\n        };\n        videoSocket.onclose = () => {\n          console.log('Video WebSocket closed');\n          isVideoStreaming = false;\n        };\n        return true;\n      } else {\n        console.error(\"启动视频流失败:\", data);\n        return false;\n      }\n    } catch (error) {\n      console.error(\"启动视频流时出错:\", error);\n      return false;\n    }\n  }\n  async stopVideoStreaming() {\n    try {\n      const response = await fetch(`http://${this.ipAddress}/api/videostreaming/stop`, {\n        method: 'POST'\n      });\n      const data = await response.json();\n      console.log(\"视频流已停止:\", data);\n      return true;\n    } catch (error) {\n      console.error(\"停止视频流时出错:\", error);\n      return false;\n    }\n  }\n  async getVideoRecordingsList() {\n    try {\n      const response = await fetch(`http://${this.ipAddress}/api/videos/recordings/list`, {\n        method: 'GET'\n      });\n      const data = await response.json();\n      console.log(\"getVideoRecordingsList:\", data);\n      return true;\n    } catch (error) {\n      console.error(\"getVideoRecordingsList:\", error);\n      return false;\n    }\n  }\n  handleBumpSensorEvent(data) {\n    if (data.message && data.message.isContacted) {\n      const sensorId = data.message.sensorId;\n      let bumpSensor;\n\n      //the placement of the robot changes the bumper mapping\n      switch (sensorId) {\n        case 'bfl':\n        case 'brl':\n          bumpSensor = 'RightBumper';\n          break;\n        case 'bfr':\n        case 'brr':\n          bumpSensor = 'LeftBumper';\n          break;\n        default:\n          console.log('Unknown bump sensor:', sensorId);\n          break;\n      }\n    }\n  }\n}","map":{"version":3,"names":["behaviors","currentVolume","videoSocket","isVideoStreaming","emotionToBehavior","annoyed","anticipation","apprehension","bored","dancing","disgust","distracted","ecstatic","elicit","fear","grief","interest","joy","loathing","pensive","rage","sad","serene","sleepy","spooked","surprised","terror","trust","vigilant","default","MistyApi","constructor","ip","socket","ipAddress","audioCallbacks","connect2Misty","bind","registerForAudioPlayComplete","registerForBumpSensor","registerAudioCallback","handleMessage","uploadAudio","playAudio","deleteAudio","startVedioStreaming","stopVideoStreaming","getVideoRecordingsList","handleBumpSensorEvent","WebSocket","onopen","console","log","setTimeout","onerror","error","onclose","onmessage","event","data","subscribeMsg","Operation","Type","DebounceMs","EventName","ReturnProperty","EventConditions","forEach","callback","send","JSON","stringify","push","message","parse","eventName","metaData","name","base64AudioData","filename","uploadResponse","fetch","method","headers","body","FileName","Data","OverwriteExisting","ok","Error","statusText","playResponse","AssetId","volume","response","result","json","startRecordAudio","stopRecordAudio","getRecordAudio","base64Param","url","status","responseData","base64","startRecordVedio","mute","duration","width","height","stopRecordVedio","getRecordVedio","processFrameCallback","isContacted","sensorId","bumpSensor"],"sources":["/Users/xx/dev/hci/conversation/app/src/misty/MistyWorker.js"],"sourcesContent":["import { behaviors } from \"./behaviorDefinition.js\";\n\nlet currentVolume = 10;\nlet videoSocket = null;\nlet isVideoStreaming = false;\n\nconst emotionToBehavior = {\n    annoyed: 'annoyance',\n    anticipation: 'anticipation',\n    apprehension: 'apprehension',\n    bored: 'boredom',\n    dancing: 'dancing',\n    disgust: 'disgust',\n    distracted: 'distraction',\n    ecstatic: 'ecstasy',\n    elicit: 'elicit',\n    fear: 'fear',\n    grief: 'grief',\n    interest: 'interest',\n    joy: 'joy',\n    loathing: 'loathing',\n    pensive: 'pensiveness',\n    rage: 'rage',\n    sad: 'sadness',\n    serene: 'serenity',\n    sleepy: 'sleepy',\n    spooked: 'spooked',\n    surprised: 'surprise',\n    terror: 'terror',\n    trust: 'trust',\n    vigilant: 'vigilance',\n    default: 'default'\n};\n\nexport class MistyApi {\n    constructor(ip) {\n        this.socket = null;\n        this.ipAddress = ip;\n        this.audioCallbacks = [];\n\n        // 将方法绑定到实例\n        this.connect2Misty = this.connect2Misty.bind(this);\n        this.registerForAudioPlayComplete = this.registerForAudioPlayComplete.bind(this);\n        this.registerForBumpSensor = this.registerForBumpSensor.bind(this);\n        this.registerAudioCallback = this.registerAudioCallback.bind(this);\n        this.handleMessage = this.handleMessage.bind(this);\n        this.uploadAudio = this.uploadAudio.bind(this);\n        this.playAudio = this.playAudio.bind(this);\n        this.deleteAudio = this.deleteAudio.bind(this);\n        this.startVedioStreaming = this.startVedioStreaming.bind(this);\n        this.stopVideoStreaming = this.stopVideoStreaming.bind(this);\n        this.getVideoRecordingsList = this.getVideoRecordingsList.bind(this);\n        this.handleBumpSensorEvent = this.handleBumpSensorEvent.bind(this);\n        \n        // this.connect2Misty(ip);\n    }\n\n    connect2Misty() {\n        const ip = this.ipAddress;\n        this.socket = new WebSocket(`ws://${ip}/pubsub`);\n\n        this.socket.onopen = () => {\n            console.log('WebSocket connected');\n            // You can send an initial command or subscribe to events here\n            setTimeout(() => {\n                // Now it's safe to register for events\n                this.registerForAudioPlayComplete();\n                this.registerForBumpSensor();\n                this.playAudio(\"mario_bros_coin.mp3\");\n                this.getVideoRecordingsList();\n            }, 500);\n        };\n\n        this.socket.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n\n        this.socket.onclose = () => {\n            console.log('WebSocket closed');\n        };\n\n        this.socket.onmessage = (event) => {\n            console.log('Message from server:', event.data);\n            // Handle incoming messages from the robot\n            this.handleMessage(event.data);\n        };\n    }\n\n    registerForAudioPlayComplete() {\n        const subscribeMsg = {\n            Operation: 'subscribe',\n            Type: 'AudioPlayComplete',\n            DebounceMs: 0,\n            EventName: 'AudioPlayComplete',\n            ReturnProperty: null,\n            EventConditions: []\n        };\n        this.audioCallbacks.forEach(callback => callback());\n        this.socket.send(JSON.stringify(subscribeMsg));\n    }\n    \n    registerForBumpSensor() {\n        const subscribeMsg = {\n            Operation: 'subscribe',\n            Type: 'BumpSensor',\n            DebounceMs: 0,\n            EventName: 'BumpSensor',\n            ReturnProperty: null,\n            EventConditions: []\n        };\n        this.socket.send(JSON.stringify(subscribeMsg));\n    }\n\n    registerAudioCallback(callback) {\n        this.audioCallbacks.push(callback);\n    }\n\n    handleMessage(data) {\n        const message = JSON.parse(data);\n        switch (message.eventName) {\n            case 'AudioPlayComplete':\n                if (message.message && message.message.metaData) {\n                    console.log('Audio playback completed');\n                    if(message.message.metaData.name !== \"mario_bros_coin.mp3\") {\n                        this.deleteAudio(message.message.metaData.name);\n                    }\n                } else {\n                    console.log('AudioPlayComplete registration status received');\n                }\n                break;\n            case 'BumpSensor':\n                this.handleBumpSensorEvent(message);\n                break;\n            case '':\n                break;    \n            default:\n                console.log('Misty message ${message} ');\n                break;\n        }\n    }\n\n    async uploadAudio(base64AudioData, filename) {\n        const uploadResponse = await fetch(`http://${this.ipAddress}/api/audio`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                FileName: filename,\n                Data: base64AudioData,\n                OverwriteExisting: true,\n            })\n        });\n\n        console.log(\"Upload Response from teh Upload audio function : \", uploadResponse);\n    \n        if (!uploadResponse.ok) {\n            throw new Error(`Failed to upload audio: ${uploadResponse.statusText}`);\n        }\n    }\n\n    async playAudio(filename) {\n        const playResponse = await fetch(`http://${this.ipAddress}/api/audio/play`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ AssetId: filename, volume: currentVolume })\n        });\n    \n        if (!playResponse.ok) {\n            throw new Error(`Failed to play audio: ${playResponse.statusText}`);\n        }\n    }\n\n    async deleteAudio(filename) {\n        try {\n            const response = await fetch(`http://${this.ipAddress}/api/audio`, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ FileName: filename })\n            });\n        \n            if (!response.ok) {\n                throw new Error(`Failed to delete audio: ${response.statusText}`);\n            }\n        \n            const result = await response.json();\n            console.log(\"Successfully deleted file:\", result, filename);\n            return result.result;\n        } catch (error) {\n            console.error('Error deleting audio:', error);\n            throw error;\n        }\n    }\n\n    async startRecordAudio(filename) {\n        try {\n            const response = await fetch(`http://${this.ipAddress}/api/audio/record/start`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ FileName: filename })\n            })\n            if (!response.ok) {\n                throw new Error(`Failed to delete audio: ${response.statusText}`);\n            }\n        } catch (error) {\n            console.error('Error deleting audio:', error);\n            throw error;\n        }\n    }\n\n    async stopRecordAudio() {\n        try {\n            const response = await fetch(`http://${this.ipAddress}/api/audio/record/stop`, {\n                method: 'POST',\n            })\n            if (!response.ok) {\n                throw new Error(`Failed to delete audio: ${response.statusText}`);\n            }\n        } catch (error) {\n            console.error('Error deleting audio:', error);\n            throw error;\n        }\n    }\n\n    async getRecordAudio(filename) {\n        try {\n            const base64Param = \"&Base64=true\";\n            const url = `http://${this.ipAddress}/api/audio?FileName=${filename}${base64Param}`;\n            \n            // Make the API request\n            const response = await fetch(url, {\n                method: 'GET',\n            });\n            if (!response.ok) {\n                throw new Error(`Failed to get audio: ${response.status} ${response.statusText}`);\n            }\n            const responseData = await response.json();\n            \n            console.log(\"Parsed response data:\", responseData);\n            return responseData.result.base64;\n        } catch (error) {\n            console.error(\"Error retrieving audio:\", error);\n            throw error;\n        }\n    }\n\n    async startRecordVedio(filename, mute, duration, width, height) {\n        try {\n            const response = await fetch(`http://${this.ipAddress}/api/videos/recordings/start`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ \"FileName\": filename,\n                    \"Mute\": mute,\n                    \"Duration\": duration,\n                    \"Width\": 1920,\n                    \"Height\": 1080 })\n            })\n            if (!response.ok) {\n                throw new Error(`Failed to delete audio: ${response.statusText}`);\n            }\n        } catch (error) {\n            console.error('Error deleting audio:', error);\n            throw error;\n        }\n\n    }\n\n    async stopRecordVedio() {\n\n    }\n\n    async getRecordVedio() {\n\n    }\n\n    async startVedioStreaming(processFrameCallback) {\n        try {\n            const response = await fetch(`http://${this.ipAddress}/api/videostreaming/start`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    \"Port\": 6789,\n                    \"Rotation\": 0,\n                    \"Width\": 640,  // 可调整为你需要的分辨率\n                    \"Height\": 480, // 可调整为你需要的分辨率\n                    \"Quality\": 75, // 画质与性能的平衡\n                    \"Overlay\": false\n                })\n            });\n        \n            const data = await response.json();\n            \n            if (data.result) {\n                videoSocket = new WebSocket(`ws://${this.ipAddress}:6789`);\n                console.log(data);\n                videoSocket.onopen = () => {\n                    console.log('Connected to video stream');\n                    isVideoStreaming = true;\n                };\n            \n                videoSocket.onmessage = (event) => {\n                    if (typeof processFrameCallback === 'function') {\n                        processFrameCallback(event.data);\n                    }\n                };\n            \n                videoSocket.onerror = (error) => {\n                    console.error('Video WebSocket error:', error);\n                };\n            \n                videoSocket.onclose = () => {\n                    console.log('Video WebSocket closed');\n                    isVideoStreaming = false;\n                };\n                return true;\n            } else {\n                console.error(\"启动视频流失败:\", data);\n                return false;\n            }\n        } catch (error) {\n            console.error(\"启动视频流时出错:\", error);\n            return false;\n        }\n    }\n\n    async stopVideoStreaming() {\n        try {\n            const response = await fetch(`http://${this.ipAddress}/api/videostreaming/stop`, {\n                method: 'POST'\n            });\n          \n            const data = await response.json();\n            console.log(\"视频流已停止:\", data);\n            return true;\n        } catch (error) {\n            console.error(\"停止视频流时出错:\", error);\n            return false;\n        }\n    }\n\n    async getVideoRecordingsList() {\n        try {\n            const response = await fetch(`http://${this.ipAddress}/api/videos/recordings/list`, {\n                method: 'GET'\n            });\n            \n            const data = await response.json();\n            console.log(\"getVideoRecordingsList:\", data);\n            return true;\n        } catch (error) {\n            console.error(\"getVideoRecordingsList:\", error);\n            return false;\n        }\n    }\n\n    handleBumpSensorEvent(data) {\n        if (data.message && data.message.isContacted) {\n            const sensorId = data.message.sensorId;\n            let bumpSensor;\n        \n            //the placement of the robot changes the bumper mapping\n            switch (sensorId) {\n                case 'bfl':\n                case 'brl':\n                    bumpSensor = 'RightBumper';\n                    break;\n                case 'bfr':\n                case 'brr':\n                    bumpSensor = 'LeftBumper';\n                    break;\n                default:\n                    console.log('Unknown bump sensor:', sensorId);\n                    break;\n            }\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}